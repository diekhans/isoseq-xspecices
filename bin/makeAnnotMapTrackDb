#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
from pycbio.sys.svgcolors import SvgColors

def parseArgs():
    usage = """Create trackDb for an assembly annoations and mappings, given a bunch of
    baked-in assumptions"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('hgDb')
    parser.add_argument('priority', type=float)
    parser.add_argument('trackDbFile')
    return parser.parse_args()


allHgDb = ("hg38", "rheMac10", "mm39", "rn6")

speciesNames = {
    "hg38": "human",
    "rheMac10": "rhesus",
    "mm39": "mouse",
    "rn6": "rat",
}
annotColor = {
    "hg38": SvgColors.midnightblue,
    "rheMac10": SvgColors.mediumslateblue,
    "mm39": SvgColors.mediumturquoise,
    "rn6": SvgColors.mediumblue,
}

annotPslTemplate = """
track {track}
shortLabel {shortLabel}
longLabel {longLabel}
html ../empty.html
type bigPsl
priority {priority}
color {color}
canPack on
visibility hide
baseColorDefault diffCodons
baseColorUseCds given
baseColorUseSequence lfExtra
indelDoubleInsert on
indelQueryInsert on
showDiffBasesAllScales .
showDiffBasesMaxZoom 10000.0
showCdsAllScales .
showCdsMaxZoom 10000.0
labelFields name,geneSym,geneId,geneType,transcriptType
defaultLabelFields geneSym
labelSeparator " "
bigDataUrl {bigDataUrl}
searchIndex name,geneSym,geneId,,transcriptId,transcriptName

"""

def addGeneSrc(fh, priority, srcDb):
    t = annotPslTemplate.format(track="{}_src".format(srcDb),
                                shortLabel="{} src genes".format(speciesNames[srcDb]),
                                longLabel="{} {} source genes".format(speciesNames[srcDb], srcDb),
                                priority=priority,
                                color=annotColor[srcDb].toRgb8Str(),
                                bigDataUrl="{}.src.bigPsl".format(srcDb))
    print(t, file=fh)
    return priority + 0.01

def addGeneMapping(fh, priority, srcDb, destDb):
    t = annotPslTemplate.format(track="{}-{}_annot".format(srcDb, destDb),
                                shortLabel="{} genes".format(speciesNames[srcDb]),
                                longLabel="{} {} gene mappings".format(speciesNames[srcDb], srcDb),
                                priority=priority,
                                color=annotColor[srcDb].toRgb8Str(),
                                bigDataUrl="{}-{}.bigPsl".format(srcDb, destDb))
    print(t, file=fh)
    return priority + 0.01

def addGeneMappings(fh, priority, srcDbs, destDb):
    for srcDb in srcDbs:
        priority = addGeneMapping(fh, priority, srcDb, destDb)
    return priority


isoSeqBedTemplate = """
track {track}
shortLabel {shortLabel}
longLabel {longLabel}
html ../empty.html
visibility hide
type bigBed 12
color {color}
bigDataUrl {bigDataUrl}
priority {priority}

"""

def addIsoSeqTrack(fh, priority, track, label, color):
    t = isoSeqBedTemplate.format(track=track,
                                 shortLabel=label,
                                 longLabel=label,
                                 color=color.toRgb8Str(),
                                 bigDataUrl=track + ".bigBed",
                                 priority=priority)
    print(t, file=fh)
    return priority + 0.01

def addIsoSeqTrackIfExists(fh, priority, hgDbDir, track, label, color):
    bigBed = osp.join(hgDbDir, track + ".bigBed")
    if not osp.exists(bigBed):
        print("Warning: isoseq bigBed not found: " + bigBed, file=sys.stderr)
    else:
        priority = addIsoSeqTrack(fh, track, label, color, priority)
    return priority

def addIsoSeqTracks(fh, priority, hgDb, hgDbDir):
    priority = addIsoSeqTrack(fh, priority, "isoseq.minimap2.2020-12-02",
                              "IsoSeq minimap2 2020-12-02",
                              SvgColors.tomato)
    return priority

def main(opts):
    # keep order
    otherDbs = tuple([d for d in allHgDb if d != opts.hgDb])
    priority = opts.priority
    with open(opts.trackDbFile, 'w') as fh:
        priority = addGeneSrc(fh, priority, opts.hgDb)
        priority = addGeneMappings(fh, priority, otherDbs, opts.hgDb)
        priority = addIsoSeqTracks(fh, priority, opts.hgDb, osp.dirname(opts.trackDbFile))


main(parseArgs())
