#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
from pycbio.sys.svgcolors import SvgColors

def parseArgs():
    usage = """Create trackDb for an assembly annoations and mappings, given a bunch of
    baked-in assumptions"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('hgDb')
    parser.add_argument('priority', type=float)
    parser.add_argument('trackDbFile')
    return parser.parse_args()


allHgDb = ("hg38", "rheMac10", "mm39", "rn6")
endSiteSrcHgDb = ("hg38", "mm39")

speciesNames = {
    "hg38": "human",
    "rheMac10": "rhesus",
    "mm39": "mouse",
    "rn6": "rat",
}
annotColor = {
    "hg38": SvgColors.midnightblue,
    "rheMac10": SvgColors.mediumslateblue,
    "mm39": SvgColors.mediumturquoise,
    "rn6": SvgColors.mediumblue,
}

bigBedTemplate = """
track {track}
shortLabel {shortLabel}
longLabel {longLabel}
html ../empty.html
visibility hide
type bigBed {bedType}
{colorSpec}
bigDataUrl {bigDataUrl}
priority {priority}
{extra}

"""

def addBigBedTrack(fh, priority, track, bedType, label, color=None, mouseOver=None):
    colorSpec = "itemRgb on" if color is None else "color {}".format(color.toRgb8Str())
    extra = ""
    if mouseOver is not None:
        extra += "mouseOver " + mouseOver + "\n"
    t = bigBedTemplate.format(track=track,
                              shortLabel=label,
                              longLabel=label,
                              colorSpec=colorSpec,
                              bedType=bedType,
                              bigDataUrl=track + ".bigBed",
                              priority=priority,
                              extra=extra)
    print(t, file=fh)
    return priority + 0.01


annotPslTemplate = """
track {track}
shortLabel {shortLabel}
longLabel {longLabel}
html ../empty.html
type bigPsl
priority {priority}
color {color}
canPack on
visibility hide
baseColorDefault diffCodons
baseColorUseCds given
baseColorUseSequence lfExtra
indelDoubleInsert on
indelQueryInsert on
showDiffBasesAllScales .
showDiffBasesMaxZoom 10000.0
showCdsAllScales .
showCdsMaxZoom 10000.0
labelFields name,geneSym,geneId,geneType,transcriptType
defaultLabelFields geneSym
labelSeparator " "
bigDataUrl {bigDataUrl}
searchIndex name,geneSym,geneId,,transcriptId,transcriptName

"""

def addGeneSrc(fh, priority, srcDb):
    t = annotPslTemplate.format(track="{}_src".format(srcDb),
                                shortLabel="{} src genes".format(speciesNames[srcDb]),
                                longLabel="{} {} source genes".format(speciesNames[srcDb], srcDb),
                                priority=priority,
                                color=annotColor[srcDb].toRgb8Str(),
                                bigDataUrl="{}.src.bigPsl".format(srcDb))
    print(t, file=fh)
    return priority + 0.01

def addGeneMapping(fh, priority, srcDb, destDb):
    t = annotPslTemplate.format(track="{}-{}_annot".format(srcDb, destDb),
                                shortLabel="{} genes".format(speciesNames[srcDb]),
                                longLabel="{} {} gene mappings".format(speciesNames[srcDb], srcDb),
                                priority=priority,
                                color=annotColor[srcDb].toRgb8Str(),
                                bigDataUrl="{}-{}.bigPsl".format(srcDb, destDb))
    print(t, file=fh)
    return priority + 0.01

def addGeneMappings(fh, priority, srcDbs, destDb):
    for srcDb in srcDbs:
        priority = addGeneMapping(fh, priority, srcDb, destDb)
    return priority


def addIsoSeqTrackIfExists(fh, priority, hgDbDir, track, label, color):
    bigBed = osp.join(hgDbDir, track + ".bigBed")
    if not osp.exists(bigBed):
        print("Warning: isoseq bigBed not found: " + bigBed, file=sys.stderr)
    else:
        priority = addBigBedTrack(fh, priority, track, 12, label, color)
    return priority

def addIsoSeqTracks(fh, priority, hgDb, hgDbDir):
    priority = addIsoSeqTrackIfExists(fh, priority, hgDbDir, "isoseq.minimap2.2020-12-02",
                                      "IsoSeq minimap2 2020-12-02",
                                      SvgColors.tomato)
    return priority

endSiteMouseOver = "$name [$cellType] ($count)"

def addEndSiteSrcTracks(fh, priority, hgDb):
    priority = addBigBedTrack(fh, priority, f"{hgDb}.tss", 9, f"{hgDb} TSS src", mouseOver=endSiteMouseOver)
    priority = addBigBedTrack(fh, priority, f"{hgDb}.polya", 9, f"{hgDb} polyA src", mouseOver=endSiteMouseOver)
    return priority

def addEndSiteMappedTracks(fh, priority, srcHgDb, hgDb):
    priority = addBigBedTrack(fh, priority, f"{srcHgDb}-{hgDb}.tss", 12, f"{srcHgDb} TSS mapped", mouseOver=endSiteMouseOver)
    priority = addBigBedTrack(fh, priority, f"{srcHgDb}-{hgDb}.polya", 12, f"{srcHgDb} polyA mapped", mouseOver=endSiteMouseOver)
    return priority

def addEndSiteTracks(fh, priority, hgDb):
    if hgDb in endSiteSrcHgDb:
        priority = addEndSiteSrcTracks(fh, priority, hgDb)
    for srcHgDb in endSiteSrcHgDb:
        if srcHgDb != hgDb:
            priority = addEndSiteMappedTracks(fh, priority, srcHgDb, hgDb)
    return priority

def addEndSiteAllSrcTracks(fh, priority, hgDb):
    priority = addBigBedTrack(fh, priority, f"{hgDb}.alltss", 6, f"{hgDb} all TSS src", color=SvgColors.magenta)
    priority = addBigBedTrack(fh, priority, f"{hgDb}.allpolya", 6, f"{hgDb} all polyA src", color=SvgColors.indigo)
    return priority

def addEndSiteAllMappedTracks(fh, priority, srcHgDb, hgDb):
    priority = addBigBedTrack(fh, priority, f"{srcHgDb}-{hgDb}.alltss", 12, f"{srcHgDb} all TSS mapped", color=SvgColors.indianred)
    priority = addBigBedTrack(fh, priority, f"{srcHgDb}-{hgDb}.allpolya", 12, f"{srcHgDb} all polyA mapped", color=SvgColors.lawngreen)
    return priority

def addEndSiteAllTracks(fh, priority, hgDb):
    if hgDb in endSiteSrcHgDb:
        priority = addEndSiteAllSrcTracks(fh, priority, hgDb)
    for srcHgDb in endSiteSrcHgDb:
        if srcHgDb != hgDb:
            priority = addEndSiteAllMappedTracks(fh, priority, srcHgDb, hgDb)
    return priority

def main(opts):
    # keep order
    otherDbs = tuple([d for d in allHgDb if d != opts.hgDb])
    priority = opts.priority
    hgDbDir = osp.dirname(opts.trackDbFile)
    with open(opts.trackDbFile, 'w') as fh:
        priority = addGeneSrc(fh, priority, opts.hgDb)
        priority = addGeneMappings(fh, priority, otherDbs, opts.hgDb)
        priority = addIsoSeqTracks(fh, priority, opts.hgDb, hgDbDir)
        priority = addEndSiteTracks(fh, priority, opts.hgDb)
        priority = addEndSiteAllTracks(fh, priority, opts.hgDb)


main(parseArgs())
