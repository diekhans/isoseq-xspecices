#!/usr/bin/env python3
import sys
from os import path as osp
import argparse
import json
from collections import namedtuple
sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))

from pycbio.hgdata.psl import PslTbl, PslReader, dropQueryUniq
from pycbio.hgdata.genePred import GenePredReader
from pycbio.tsv import TsvReader
from pycbio.sys import fileOps
from xspecies.data import Range, Coords, MappedTranscript, MappedExon, mappedTranscriptToBed, getMappedExonFrame

# src tcoords -> mapping tcoords -> mapping qcoords -> src qcoords -> src tcoords

def parseArgs():
    usage = """Generate annotation JSON file for exchange"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--annotBed')
    parser.add_argument('srcGenome')
    parser.add_argument('mappedGenome')
    parser.add_argument('srcPsl')
    parser.add_argument('srcMeta')
    parser.add_argument('mappedPsl')
    parser.add_argument('mappedGenePred')
    parser.add_argument('annotJson')
    return parser.parse_args()

class AlnBlk(namedtuple("AlnBlk", ("qStart", "qEnd", "tStart", "tEnd"))):
    pass


def pslGetIntersectRanges(srcBlk, mappedPsl):
    "returns block intersection"
    def _blkIntersect(blk):
        bqStart = max(srcBlk.qStartPlus, blk.qStartPlus)
        bqEnd = min(srcBlk.qEndPlus, blk.qEndPlus)
        if mappedPsl.qStrand == '-':
            bqStart, bqEnd = mappedPsl.qSize - bqEnd, mappedPsl.qSize - bqStart
        btStart = blk.tStart + (bqStart - blk.qStart)
        alnBlk = AlnBlk(bqStart, bqEnd, btStart, btStart + (bqEnd - bqStart))
        return alnBlk

    alnBlks = []
    for blk in mappedPsl.blocks:
        if (srcBlk.qStartPlus < blk.qEndPlus) and (srcBlk.qEndPlus > blk.qStartPlus):
            alnBlks.append(_blkIntersect(blk))
    return alnBlks

def pslBlkToRange(blk):
    return Range(blk.tStart, blk.tEnd)

def pslToCoords(psl):
    return Coords(psl.tName, psl.tStart, psl.tEnd, psl.qStrand)

def mkSrcExonCoords(srcGenome, srcExon):
    return "{}.{}:{}-{}".format(srcGenome, srcExon.psl.tName, srcExon.tStart, srcExon.tEnd)

def loadMappedGp(mappedGpFile):
    return {gp.name: gp for gp in GenePredReader(mappedGpFile)}

def loadSrcMeta(srcMeta):
    return {t.transId: t for t in TsvReader(srcMeta)}

def buildMappedExon(srcGenome, srcExon, mappedRanges, mappedGp):
    mappedRegion = Range(mappedRanges[0].tStart, mappedRanges[-1].tEnd)
    mappedBases = sum([b.tEnd - b.tStart for b in mappedRanges])
    cds, frame = getMappedExonFrame(mappedGp, mappedRegion)
    return MappedExon(mkSrcExonCoords(srcGenome, srcExon),
                      pslBlkToRange(srcExon), len(srcExon),
                      mapped=mappedRegion, mappedBases=mappedBases,
                      cds=cds, frame=frame)

def processExon(srcGenome, srcExon, mappedAln, mappedGp):
    mappedRanges = pslGetIntersectRanges(srcExon, mappedAln)
    if len(mappedRanges) == 0:
        return MappedExon(mkSrcExonCoords(srcGenome, srcExon), pslBlkToRange(srcExon), len(srcExon))
    else:
        return buildMappedExon(srcGenome, srcExon, mappedRanges, mappedGp)

def getCds(mappedGp):
    if mappedGp.txStart < mappedGp.txEnd:
        return Range(mappedGp.txStart, mappedGp.txEnd)
    else:
        return None

def processMapping(srcGenome, mappedGenome, srcAlns, srcMeta, mappedAln, mappedGp):
    assert mappedAln.tStrand == '+'
    srcAln = srcAlns.getByQName(dropQueryUniq(mappedAln.qName))[0]
    exons = [processExon(srcGenome, srcExon, mappedAln, mappedGp) for srcExon in srcAln.blocks]
    mappedTrans = MappedTranscript(srcGenome, srcAln.qName, mappedGenome, mappedAln.qName, pslToCoords(srcAln), pslToCoords(mappedAln),
                                   srcMeta.geneId, srcMeta.geneName, srcMeta.geneType, srcMeta.transcriptName, srcMeta.transcriptType,
                                   getCds(mappedGp), exons)
    return mappedTrans

def processMappings(srcGenome, mappedGenome, srcAlns, srcMetas, mappedPslFile, mappedGps):
    return [processMapping(srcGenome, mappedGenome, srcAlns, srcMetas[dropQueryUniq(ma.qName)],
                           ma, mappedGps[ma.qName])
            for ma in PslReader(mappedPslFile)]

def writeAnnotBed(mappedAnnots, bedFh):
    for ma in mappedAnnots:
        bed = mappedTranscriptToBed(ma)
        if bed is not None:
            bed.write(bedFh)

def main(opts):
    srcAlns = PslTbl(opts.srcPsl, qNameIdx=True, qUniqDrop=True)
    srcMetas = loadSrcMeta(opts.srcMeta)
    mappedGps = loadMappedGp(opts.mappedGenePred)
    mappedAnnots = processMappings(opts.srcGenome, opts.mappedGenome, srcAlns, srcMetas, opts.mappedPsl, mappedGps)

    with fileOps.opengz(opts.annotJson, "w") as fh:
        json.dump(mappedAnnots, fh, indent=4)

    if opts.annotBed is not None:
        with fileOps.opengz(opts.annotBed, "w") as fh:
            writeAnnotBed(mappedAnnots, fh)


main(parseArgs())
