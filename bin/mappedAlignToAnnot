#!/usr/bin/env python3
import sys
from os import path as osp
import argparse
import json
from collections import namedtuple
import twobitreader
sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))

from pycbio.hgdata import dnaOps
from pycbio.hgdata.frame import Frame
from pycbio.hgdata.coords import Coords
from pycbio.sys import fileOps
from pycbio.sys.objDict import ObjDict
from Bio.Seq import Seq
from xspecies.data import (Region, RCoords, MappedTranscript, MappedExon, mappedTranscriptToBed,
                           getGenomeTwoBit, loadMappings)

def prerr(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)

# src tcoords -> mapping tcoords -> mapping qcoords -> src qcoords -> src tcoords

def parseArgs():
    usage = """Generate annotation JSON file for exchange"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('srcGenome')
    parser.add_argument('srcPsl')
    parser.add_argument('srcGenePred')
    parser.add_argument('srcMeta')
    parser.add_argument('mappedGenome')
    parser.add_argument('mappedPsl')
    parser.add_argument('mappedGenePred',
                        help="produced by transMapPslToGenePred -noBlockMerge")
    parser.add_argument('--annotBed')
    parser.add_argument('annotJson')
    return parser.parse_args()

class MappedAlnBlk(namedtuple("MappedAlnBlk", ("src", "srcCds", "mapped", "mappedCds", "rna", "frame"))):
    """coordinates exons blocks, in transcription order, which means genome
    might be negative strand coordinates"""

    @staticmethod
    def _fmt(c):
        if c is None:
            return "None"
        return f"{c.name}:{c.start}-{c.end}[{c.strand}]"

    def __str__(self):
        return ("alnBlk rna:  " + self._fmt(self.rna) + '\n'
                "       src:  " + self._fmt(self.src) + '\n'
                "    srcCds:  " + self._fmt(self.srcCds) + '\n'
                "       map:  " + self._fmt(self.mapped) + '\n'
                "    mapCds:  " + self._fmt(self.mappedCds))

def pslCoords(psl):
    return Coords(psl.tName, psl.tStart, psl.tEnd, psl.qStrand, psl.tSize)

def blkCoords(blk):
    return Coords(blk.psl.tName, blk.tStart, blk.tEnd, blk.psl.tStrand, blk.psl.tSize)

def getCdsRegion(gp):
    return Region(gp.txStart, gp.txEnd)

def getCdsCoords(psl, gp):
    return qOrient(psl,
                   Coords(gp.chrom, gp.cdsStart, gp.cdsEnd, gp.strand, psl.tSize))

def qOrient(psl, coords):
    if psl.qStrand == '-':
        coords = coords.reverse()
    return coords

def getSubCoords(blk, qStart, qEnd):
    if blk.psl.qStrand == '-':
        qStart, qEnd = dnaOps.reverseCoords(qStart, qEnd, blk.psl.qSize)
    tStart = blk.tStart + (qStart - blk.qStart)
    tEnd = tStart + (qEnd - qStart)
    return blkCoords(blk).adjust(start=tStart, end=tEnd)

def getSrcSubrangeCds(srcBlk, srcExon, srcCoords):
    cds = getCdsCoords(srcBlk.psl, srcExon.gene).intersect(srcCoords)
    if len(cds) == 0:
        return None
    else:
        return cds

def getMappedSubrangeCds(srcCoords, srcCdsCoords, mappedCoords):
    # input is in transcription order
    if srcCdsCoords is None:
        return None
    srcOff = srcCdsCoords.start - srcCoords.start
    return mappedCoords.adjust(start=mappedCoords.start + srcOff,
                               end=mappedCoords.start + srcOff + len(srcCdsCoords))

def getMappedFrame(srcBlk, srcExon, srcCoords, srcCdsCoords, mappedCoords, mappedCdsCoords):
    if srcCdsCoords is None:
        return None
    srcFullCds = getCdsCoords(srcBlk.psl, srcExon.gene)
    srcExonCds = qOrient(srcBlk.psl, blkCoords(srcBlk)).intersect(srcFullCds)

    if srcExon.gene.strand == '+':
        return Frame(srcExon.frame) + (srcCdsCoords.start - srcExonCds.start)
    else:
        return Frame(srcExon.frame) + (srcExonCds.end - srcCdsCoords.end)

def _blkIntersect(srcBlk, srcExon, mappedBlk, mappedExon):
    """overlap has been determine by query coords, src + mapped are converted to rna order  """
    srcCoords = qOrient(srcBlk.psl,
                        getSubCoords(srcBlk, mappedBlk.qStartPlus, mappedBlk.qEndPlus))
    srcCdsCoords = getSrcSubrangeCds(srcBlk, srcExon, srcCoords)
    mappedCoords = qOrient(mappedBlk.psl,
                           Coords(mappedBlk.psl.tName, mappedBlk.tStart, mappedBlk.tEnd, mappedBlk.psl.tStrand, mappedBlk.psl.tSize))
    mappedCdsCoords = getMappedSubrangeCds(srcCoords, srcCdsCoords, mappedCoords)
    rnaCoords = Coords(mappedBlk.psl.qName, mappedBlk.qStartPlus, mappedBlk.qEndPlus, '+', mappedBlk.psl.qSize)
    frame = getMappedFrame(srcBlk, srcExon, srcCoords, srcCdsCoords, mappedCoords, mappedCdsCoords)
    alnBlk = MappedAlnBlk(srcCoords, srcCdsCoords, mappedCoords, mappedCdsCoords, rnaCoords, frame)
    if (srcCdsCoords is None) or (mappedCdsCoords is None):
        assert (srcCdsCoords is None) and (mappedCdsCoords is None)
    else:
        assert len(alnBlk.srcCds) == len(alnBlk.mappedCds), f"{len(alnBlk.srcCds)} != {len(alnBlk.mappedCds)}, {repr(alnBlk.srcCds)} != {repr(alnBlk.mappedCds)}"
    return alnBlk

def srcBlkToMappedBlks(srcBlk, srcExon, mappedPsl, mappedGp):
    """returns src block mappings as a list of MappedAlnBlk objs.
    Results will be strand-specific coordinates in direction of transcriptions.
    """
    alnBlks = []
    # find mapped blocks associate with src exons
    for iMapped in range(len(mappedPsl.blocks)):
        mappedBlk = mappedPsl.blocks[iMapped]
        if (srcBlk.qStartPlus < mappedBlk.qEndPlus) and (srcBlk.qEndPlus > mappedBlk.qStartPlus):
            alnBlks.append(_blkIntersect(srcBlk, srcExon, mappedBlk, mappedGp.exons[iMapped]))
    alnBlks.sort(key=lambda a: (a.rna.start,))
    return alnBlks

def _calcIdentCover(src, mapped):
    alnCnt = matchCnt = 0
    srcCnt = srcAligned = 0
    for cs, cm in zip(src, mapped):
        if (cs != '-') and (cm != '-'):
            alnCnt += 1
            if cs.upper() == cm.upper():
                matchCnt += 1
        if cs != '-':
            srcCnt += 1
            if cm != '-':
                srcAligned += 1
    return (round(matchCnt / alnCnt if alnCnt > 0 else 0.0, 3),
            round(srcAligned / srcCnt if srcCnt > 0 else 0.0, 3))

class SeqAlign(ObjDict):
    def __init__(self, src, mapped, *, inclCover=True):
        self.src = src
        self.mapped = mapped
        self.identity, coverage = _calcIdentCover(src, mapped)
        if inclCover:
            self.coverage = coverage

    def __len__(self):
        return len(self.src)

    @staticmethod
    def fromParts(srcParts, mappedParts, *, inclCover=True):
        srcAln = "".join(srcParts)
        mappedAln = "".join(mappedParts)
        assert len(srcAln) == len(mappedAln), f"srcAln={len(srcAln)} mappedAln={len(mappedAln)}"
        return SeqAlign(srcAln, mappedAln, inclCover=inclCover)

def getSeq(seqreader, coords):
    acoords = coords if coords.strand == '+' else coords.reverse()
    seq = seqreader[acoords.name][acoords.start:acoords.end]
    if coords.strand == '-':
        seq = dnaOps.reverseComplement(seq)
    return seq

def addDnaAlnBlock(srcGenomeSeqs, mappedGenomeSeqs, srcPrev, mappedPrev,
                   alnBlk, alnBlkSeqsMap, srcParts, mappedParts):
    # add unaligned on both sides
    if (alnBlk.src.start > srcPrev):
        s = alnBlk.src.adjust(start=srcPrev, end=alnBlk.src.start)
        srcParts.append(getSeq(srcGenomeSeqs, s))
        mappedParts.append((alnBlk.src.start - srcPrev) * '-')
    if (alnBlk.mapped.start > mappedPrev):
        m = alnBlk.mapped.adjust(start=mappedPrev, end=alnBlk.mapped.start)
        mappedParts.append(getSeq(mappedGenomeSeqs, m))
        srcParts.append((alnBlk.mapped.start - mappedPrev) * '-')
    blkSeqs = SeqAlign(getSeq(srcGenomeSeqs, alnBlk.src),
                       getSeq(mappedGenomeSeqs, alnBlk.mapped))
    alnBlkSeqsMap[alnBlk] = blkSeqs
    srcParts.append(blkSeqs.src)
    mappedParts.append(blkSeqs.mapped)

def buildDnaAln(srcGenomeSeqs, mappedGenomeSeqs, alnBlks):
    alnBlkSeqsMap = {}  # by alnBlk for making proteins
    srcParts = []
    mappedParts = []
    srcPrev = alnBlks[0].src.start
    mappedPrev = alnBlks[0].mapped.start
    for alnBlk in alnBlks:
        addDnaAlnBlock(srcGenomeSeqs, mappedGenomeSeqs, srcPrev, mappedPrev, alnBlk, alnBlkSeqsMap, srcParts, mappedParts)
        srcPrev = alnBlk.src.end
        mappedPrev = alnBlk.mapped.end
    return SeqAlign.fromParts(srcParts, mappedParts), alnBlkSeqsMap

def addProtAlnBlock(alnBlk, alnBlkSeqs, srcParts, mappedParts):
    phase = alnBlk.frame.toPhase()
    iAln = (alnBlk.srcCds.start - alnBlk.src.start) + phase
    nBases = len(alnBlk.srcCds) - phase
    nBases -= nBases % 3

    srcParts.append(str(Seq(alnBlkSeqs.src[iAln:iAln + nBases]).translate()))
    mappedParts.append(str(Seq(alnBlkSeqs.mapped[iAln:iAln + nBases]).translate()))


def buildProtAln(srcExon, alnBlks, alnBlkSeqsMap):
    # for now, this drops codons split across gaps
    srcParts = []
    mappedParts = []
    for alnBlk in alnBlks:
        if (len(alnBlk.src) == len(alnBlk.mapped)) and (alnBlk.srcCds is not None):
            addProtAlnBlock(alnBlk, alnBlkSeqsMap[alnBlk], srcParts, mappedParts)

    protAln = SeqAlign.fromParts(srcParts, mappedParts, inclCover=False)
    if len(protAln) == 0:
        return None
    else:
        return protAln

def pslBlkToRegion(blk):
    return Region(blk.tStart, blk.tEnd)

def pslToRCoords(psl):
    return RCoords(psl.tName, psl.tStart, psl.tEnd, psl.qStrand)

def mkSrcExonId(srcGenome, srcExon):
    return "{}.{}:{}-{}".format(srcGenome, srcExon.gene.chrom, srcExon.start, srcExon.end)

def alnBlksToRegion(startLoc, endLoc):
    if startLoc is None:
        return None
    return startLoc.adjust(start=startLoc.start, end=endLoc.end).abs()

def buildMappedExon(srcGenome, srcGenomeSeqs, mappedGenomeSeqs, srcExonNum, srcBlk, srcExon, mappedPsl, mappedGp, alnBlks):
    srcRegion = alnBlksToRegion(alnBlks[0].src, alnBlks[-1].src)
    srcCds = Region(srcExon.gene.cdsStart, srcExon.gene.cdsEnd).intersect(Region(srcExon.start, srcExon.end)).noneIfEmpty()
    mappedRegion = alnBlksToRegion(alnBlks[0].mapped, alnBlks[-1].mapped)
    mappedCds = Region(mappedGp.cdsStart, mappedGp.cdsEnd).intersect(mappedRegion).noneIfEmpty()
    mappedBases = sum([len(b.mapped) for b in alnBlks])
    dnaAlign, alnBlkSeqsMap = buildDnaAln(srcGenomeSeqs, mappedGenomeSeqs, alnBlks)
    protAlign = buildProtAln(srcExon, alnBlks, alnBlkSeqsMap)
    return MappedExon(mkSrcExonId(srcGenome, srcExon), srcExonNum,
                      src=Region.fromCoords(srcRegion), srcCds=srcCds, srcBases=len(srcExon),
                      mapped=Region.fromCoords(mappedRegion), mappedBases=mappedBases, mappedCds=mappedCds,
                      frame=Frame.fromFrame(srcExon.frame),
                      dnaAlign=dnaAlign, protAlign=protAlign)

def printAlnBlks(srcPsl, mappedPsl, alnBlks):
    prerr(">>>>", srcPsl.qName, repr(pslCoords(srcPsl)), " ->", mappedPsl.qName, repr(pslCoords(mappedPsl)),
          "<<<<")
    for ab in alnBlks:
        prerr(repr(ab))
    prerr()

def processExon(srcGenome, srcGenomeSeqs, mappedGenomeSeqs, srcExonNum, srcBlk, srcExon, mappedPsl, mappedGp):
    alnBlks = srcBlkToMappedBlks(srcBlk, srcExon, mappedPsl, mappedGp)
    # printAlnBlks(srcBlk.psl, mappedPsl, alnBlks)
    if len(alnBlks) == 0:
        return MappedExon(mkSrcExonId(srcGenome, srcExon), srcExonNum, pslBlkToRegion(srcBlk), len(srcExon))
    else:
        return buildMappedExon(srcGenome, srcGenomeSeqs, mappedGenomeSeqs, srcExonNum, srcBlk, srcExon, mappedPsl, mappedGp, alnBlks)

def processTrans(srcGenome, srcGenomeSeqs, mappedGenome, mappedGenomeSeqs, mappedData):
    exons = []
    # traverse in RNA direction
    iExonIter = range(len(mappedData.srcPsl.blocks))
    if mappedData.srcPsl.qStrand == '-':
        iExonIter = reversed(iExonIter)

    srcExonNum = 1
    for iSrcExon in iExonIter:
        exons.append(processExon(srcGenome, srcGenomeSeqs, mappedGenomeSeqs, srcExonNum, mappedData.srcPsl.blocks[iSrcExon],
                                 mappedData.srcGp.exons[iSrcExon], mappedData.mappedPsl, mappedData.mappedGp))
        srcExonNum += 1

    srcMeta = mappedData.srcMeta
    mappedTrans = MappedTranscript(srcGenome, mappedData.srcPsl.qName, mappedGenome, mappedData.mappedPsl.qName, pslToRCoords(mappedData.srcPsl), pslToRCoords(mappedData.mappedPsl),
                                   srcMeta.geneId, srcMeta.geneName, srcMeta.geneType, srcMeta.transcriptName, srcMeta.transcriptType,
                                   getCdsRegion(mappedData.srcGp), getCdsRegion(mappedData.mappedGp), exons)
    return mappedTrans

def mappedAlignToAnnot(srcGenome, mappedGenome, mappedDataSet):
    srcGenomeSeqs = twobitreader.TwoBitFile(getGenomeTwoBit(srcGenome))
    mappedGenomeSeqs = twobitreader.TwoBitFile(getGenomeTwoBit(mappedGenome))

    mappedAnnots = []
    for mappedData in mappedDataSet:
        mappedAnnots.append(processTrans(srcGenome, srcGenomeSeqs,
                                         mappedGenome, mappedGenomeSeqs,
                                         mappedData))
    return mappedAnnots

def writeAnnotBed(mappedAnnots, bedFh):
    for ma in mappedAnnots:
        bed = mappedTranscriptToBed(ma)
        if bed is not None:
            bed.write(bedFh)

def main(opts):
    mappedDataSet = loadMappings(opts.srcPsl, opts.srcGenePred, opts.srcMeta,
                                 opts.mappedPsl, opts.mappedGenePred)
    mappedAnnots = mappedAlignToAnnot(opts.srcGenome, opts.mappedGenome,
                                      mappedDataSet)

    with fileOps.opengz(opts.annotJson, "w") as fh:
        json.dump(mappedAnnots, fh, indent=4)

    if opts.annotBed is not None:
        with fileOps.opengz(opts.annotBed, "w") as fh:
            writeAnnotBed(mappedAnnots, fh)


main(parseArgs())
