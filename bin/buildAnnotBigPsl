#!/usr/bin/env python3

import sys
import argparse
from os import path as osp
from Bio import SeqIO
import pipettor
import tempfile
import logging
from collections import defaultdict
from pycbio.sys import fileOps, loggingOps
from pycbio.tsv import TsvTable, TabFileReader

etcDir = osp.normpath(osp.join(osp.dirname(__file__), "../etc"))
debug = False

def parseArgs():
    usage = """ buildBig and add columns from TSV from bigPsl to make bigPslWithMeta"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('metaTsv')
    parser.add_argument('pslIn')
    parser.add_argument('srcCds')
    parser.add_argument('srcFa')
    parser.add_argument('chromSizes')
    parser.add_argument('bigPslOut')
    return parser.parse_args()

def wackUniqSuffix(ident):
    return ident.split('-')[0]

def loadUniqIdMap(pslIn):
    idToUniqIds = defaultdict(list)
    for row in fileOps.iterRows(pslIn):
        idToUniqIds[wackUniqSuffix(row[9])].append(row[9])
    idToUniqIds.default_factory = None
    return idToUniqIds

def editCds(idToUniqIds, srcCds):
    cdsEditFh = tempfile.NamedTemporaryFile(mode='w', delete=not debug)
    if debug:
        print("editCds:", cdsEditFh.name, file=sys.stderr)
    for row in fileOps.iterRows(srcCds):
        for uniqId in idToUniqIds.get(row[0], ()):
            fileOps.prRowv(cdsEditFh, uniqId, row[1])
    cdsEditFh.flush()
    return cdsEditFh

def editFasta(idToUniqIds, srcFa):
    faEditFh = tempfile.NamedTemporaryFile(mode='w', delete=not debug)
    if debug:
        print("editFa:", faEditFh.name, file=sys.stderr)
    with fileOps.opengz(srcFa) as srcFaFh:
        for rec in SeqIO.parse(srcFaFh, "fasta"):
            for uniqId in idToUniqIds.get(rec.id, ()):
                rec.id = uniqId
                SeqIO.write(rec, faEditFh, "fasta")
    faEditFh.flush()
    return faEditFh

def processRec(metaData, rec, outFh):
    transId = wackUniqSuffix(rec[3])
    mds = metaData.idx.transId.get(transId)
    if mds is None:
        raise Exception("psl qName without suffix, not found in metadata: {}".format(transId))
    md = mds[0]
    print(*rec, md.geneId, md.geneName, md.geneType, transId, md.transcriptName, md.transcriptType, sep='\t', file=outFh)

def addMeta(metaData, bigPslIn, bigPslMetaIn):
    with fileOps.opengz(bigPslMetaIn, 'w') as outFh:
        for rec in TabFileReader(bigPslIn):
            processRec(metaData, rec, outFh)

def bigPslToPsl(inPsl, srcCds, srcFa, bigPslIn):
    pipettor.run([["pslToBigPsl", "-cds=" + srcCds, "-fa=" + srcFa, inPsl, "/dev/stdout"],
                  ["sort", "-k1,1", "-k2,2n"]], stdout=bigPslIn)

def bedToBigBed(bigPslIn, asFile, chromSizes, bigPslOut):
    pipettor.run(["bedToBigBed", "-type=bed12+13", "-tab", "-as=" + asFile, bigPslIn, chromSizes, bigPslOut])

def buildBigPsl(pslIn, metaData, cdsEditFh, faEditFh, chromSizes, bigPslOut):
    with tempfile.NamedTemporaryFile(delete=not debug) as bigPslInFh:
        if debug:
            print("bigPslIn:", bigPslInFh.name, file=sys.stderr)
        bigPslToPsl(pslIn, cdsEditFh.name, faEditFh.name, bigPslInFh.name)
        with tempfile.NamedTemporaryFile(delete=not debug) as bigPslMetaInFh:
            if debug:
                print("bigPslMetaIn:", bigPslMetaInFh.name, file=sys.stderr)
            addMeta(metaData, bigPslInFh.name, bigPslMetaInFh.name)
            bedToBigBed(bigPslMetaInFh.name, osp.join(etcDir, "bigPslWithMeta.as"), chromSizes, bigPslOut)

def main(opts):
    if debug:
        pipettor.setDefaultLogger(loggingOps.setupStderrLogger(logging.DEBUG))
    metaData = TsvTable(opts.metaTsv, multiKeyCols=('transId',))
    idToUniqIds = loadUniqIdMap(opts.pslIn)
    cdsEditFh = editCds(idToUniqIds, opts.srcCds)
    faEditFh = editFasta(idToUniqIds, opts.srcFa)

    with fileOps.AtomicFileCreate(opts.bigPslOut) as bigPslOutTmp:
        buildBigPsl(opts.pslIn, metaData, cdsEditFh, faEditFh, opts.chromSizes, bigPslOutTmp)


main(parseArgs())
