#!/usr/bin/env python3

import argparse
from pycbio.sys import fileOps
import pyBigWig

def parseArgs():
    usage = """build a bed of geneBounds from bigPslWithMeta"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('bigPslIn')
    parser.add_argument('geneBed')
    return parser.parse_args()

def updateBounds(rec, genesBounds):
    name = rec[2].split('\t')[23]  # yuck
    bounds = genesBounds.get(name)
    if bounds is None:
        genesBounds[name] = (rec[0], rec[1])
    else:
        genesBounds[name] = (min(rec[0], bounds[0]), max(rec[1], bounds[1]))

def collectBounds(bpFh, chrom, size):
    genesBounds = {}
    for rec in bpFh.entries(chrom, 0, size):
        updateBounds(rec, genesBounds)
    return genesBounds

def writeGenes(chrom, genesBounds, geneBedFh):
    beds = [(chrom, ) + genesBounds[g] + (g,) for g in genesBounds.keys()]
    beds.sort(key=lambda b: (1, 2))
    for bed in beds:
        fileOps.prRow(geneBedFh, bed)

def processChrom(bpFh, chrom, size, geneBedFh):
    genesBounds = collectBounds(bpFh, chrom, size)
    writeGenes(chrom, genesBounds, geneBedFh)

def makeGeneBoundsBed(bpFh, geneBedFh):
    chroms = bpFh.chroms()
    for chrom in sorted(chroms.keys()):
        processChrom(bpFh, chrom, chroms[chrom], geneBedFh)

def main(args):
    with pyBigWig.open(args.bigPslIn) as bpFh:
        with open(args.geneBed, 'w') as geneBedFh:
            makeGeneBoundsBed(bpFh, geneBedFh)


main(parseArgs())
