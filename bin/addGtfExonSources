#!/usr/bin/env python3
import sys
from os import path as osp
import argparse
import re

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from pycbio.hgdata.psl import PslTbl, dropQueryUniq
from pycbio.sys import fileOps

# GTF coords -> mapping tcoords -> mapping qcoords -> src qcoords -> src tcoords

def parseArgs():
    usage = """Edit the GTF for a mapping adding exon_source and block_source, both as source coordinates"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('srcGenomeDb')
    parser.add_argument('srcPsl')
    parser.add_argument('mappedPsl')
    parser.add_argument('inGtf')
    parser.add_argument('outGtf')
    return parser.parse_args()

class GtfRec:
    __slots__ = ("seqname", "source", "feature", "start", "end", "score", "strand", "frame", "attributes")

    def __init__(self, row):
        self.seqname, self.source, self.feature, self.start, self.end, self.score, self.strand, self.frame, self.attributes = row
        self.start = int(self.start)
        self.end = int(self.end)

    def getTransId(self):
        # transcript_id ENST00000327381.7 or ENST00000497752.7_PAR_Y
        # ENST00000211314.5_2 with GTF modifier added
        m = re.search('transcript_id "([^"]+)"', self.attributes)
        if m is None:
            raise Exception("can't get transcript id: " + str(self))
        tid = m.group(1)
        m = re.search('^(.+)_[0-9]+$', tid)  # drop modifier
        if m is not None:
            tid = m.group(1)
        return tid

    def __str__(self):
        return "\t".join([str(getattr(self, c)) for c in self.__slots__])

def pslFindBlockByQuery(psl, qStart, qEnd):
    "range should be is positive coordinates"
    for blk in psl.blocks:
        if (qStart < blk.qEndPlus) and (qEnd > blk.qStartPlus):
            return blk
    return None

def pslFindBlockByTarget(psl, tStart, tEnd):
    "range should be is positive coordinates"
    for blk in psl.blocks:
        if (blk.tStartPlus < tEnd) and (blk.tEndPlus > tStart):
            return blk
    return None

def getTargetMatchBlock(psl, chrom, strand, tStart, tEnd, exactMatch):
    if not ((psl.tName == chrom) and (psl.qStrand == strand) and (psl.tStart < tEnd) and (psl.tEnd > tStart)):
        return None
    blk = pslFindBlockByTarget(psl, tStart, tEnd)
    if ((exactMatch and (blk.tStart == tStart) and (blk.tEnd == tEnd))
        or ((not exactMatch) and (blk.tStart <= tStart) and (blk.tEnd >= tEnd))):
        return blk
    else:
        return None

def getPslByTargetContained(psls, chrom, strand, tStart, tEnd, exactMatch):
    # Exons must match blocks exactly, CDS and UTR can be contained in blocks.  We look for contained here
    for psl in psls:
        blk = getTargetMatchBlock(psl, chrom, strand, tStart, tEnd, exactMatch=exactMatch)
        if blk is not None:
            return blk
    raise Exception(f"PSL with block containing or matching {chrom}:{tStart}-{tEnd} not found")

def gtfRecToMappingBlock(mappings, transId, gtfRec):
    blk = getPslByTargetContained(mappings.getByQName(transId),
                                  gtfRec.seqname, gtfRec.strand, gtfRec.start - 1, gtfRec.end,
                                  exactMatch=(gtfRec.feature == 'exon'))
    if gtfRec.feature == "exon":
        if (blk.tStartPlus != gtfRec.start - 1) or (blk.tEndPlus != gtfRec.end):
            raise Exception(f"transcript {transId} exon {gtfRec.seqname}:{gtfRec.start - 1}-{gtfRec.end} doesn't match mapping PSL block exactly {blk}")
    else:
        if (blk.tStartPlus > gtfRec.start - 1) or (blk.tEndPlus < gtfRec.end):
            raise Exception(f"transcript {transId} {gtfRec.feature} {gtfRec.seqname}:{gtfRec.start - 1}-{gtfRec.end} not contained in mapping PSL block {blk}")
    return blk

def mappingBlkToSrcExon(annots, transId, mappingBlk):
    srcPsl = annots.getByQName(transId)[0]
    srcExon = pslFindBlockByQuery(srcPsl, mappingBlk.qStartPlus, mappingBlk.qEndPlus)
    return srcExon

def getBlkSourceRange(mappingBlk, srcExon):
    blkOff = mappingBlk.qStartPlus - srcExon.qStartPlus
    assert blkOff >= 0
    if mappingBlk.psl.qStrand == srcExon.psl.qStrand:
        start = srcExon.tStart + blkOff
        end = start + len(mappingBlk)
    else:
        end = srcExon.tEnd - blkOff
        start = end - len(mappingBlk)
    assert (start >= srcExon.tStartPlus) and (end <= srcExon.tEndPlus), f"not ({start} >= {srcExon.tStartPlus}) and ({end} <= {srcExon.tEndPlus})"
    return start, end

def gtfRecAddAttrs(srcGenomeDb, mappings, annots, gtfRec):
    transId = dropQueryUniq(gtfRec.getTransId())
    mappingBlk = gtfRecToMappingBlock(mappings, transId, gtfRec)
    srcExon = mappingBlkToSrcExon(annots, transId, mappingBlk)

    srcBlkStart, srcBlkEnd = getBlkSourceRange(mappingBlk, srcExon)

    exonAttr = 'exon_source "{}.{}:{}-{}"'.format(srcGenomeDb, srcExon.psl.tName,
                                                  srcExon.tStartPlus, srcExon.tEndPlus)
    blkAttr = 'block_source "{}.{}:{}-{}"'.format(srcGenomeDb, srcExon.psl.tName,
                                                  srcBlkStart, srcBlkEnd)
    gtfRec.attributes += " {}; {};".format(exonAttr, blkAttr)


featuresToEdit = frozenset(["exon", "3UTR", "5UTR", "CDS", "start_codon", "stop_codon"])


def processGtfRow(srcGenomeDb, mappings, annots, row, outGtfFh):
    try:
        gtfRec = GtfRec(row)
        if gtfRec.feature in featuresToEdit:
            gtfRecAddAttrs(srcGenomeDb, mappings, annots, gtfRec)
    except Exception as ex:
        raise Exception(f"Error processing {row}") from ex
    print(str(gtfRec), file=outGtfFh)

def processGtfLine(srcGenomeDb, mappings, annots, line, outGtfFh):
    if line.startswith('#') or (line == ""):
        print(line, file=outGtfFh)
    else:
        processGtfRow(srcGenomeDb, mappings, annots, line.split('\t'), outGtfFh)

def processGtf(srcGenomeDb, mappings, annots, inGtf, outGtfFh):
    for line in fileOps.iterLines(inGtf):
        processGtfLine(srcGenomeDb, mappings, annots, line, outGtfFh)

def main(opts):
    annots = PslTbl(opts.srcPsl, qNameIdx=True)
    mappings = PslTbl(opts.mappedPsl, qNameIdx=True, qUniqDrop=True)
    with open(opts.outGtf, "w") as outGtfFh:
        processGtf(opts.srcGenomeDb, mappings, annots, opts.inGtf, outGtfFh)


main(parseArgs())
